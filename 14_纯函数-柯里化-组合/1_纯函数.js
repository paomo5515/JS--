/*
    纯函数在维基百科中的定义：
  此函数 在相同的输入值时，需 产生相同的输出。
  函数的输出和输入值意外的其他隐藏心思或状态无关，也和 由 I/O 设备产生的外部输出无关。
  该函数不能有语义上可观察的函数副作用，诸如 "触发事件"，使输出设备输出，或更改输出值以外物件的内容等。

   总结：
    确定的输入，一定会产生确定的输出；
    函数在执行过程中，不能产生副作用；

  副作用：表示在执行一个函数时，除了返回函数值之外，还对 调用函数产生了附加的影响，
  比如修改了全局变量，修改参数或者改变外部的存储。

    纯函数的优势：
  可以安心的编写何使用；
  你在写的时候保证了函数的纯度，只是单纯实现自己的业务逻辑即可，不需要关心传入的内容
  是如何获得的或着依赖其他的外部变量是否已经发生了修改；
  你在用的时候，你确定你的输入内容不会被任意篡改，并且自己确定的输入，一定会有去确定的输出；
*/

// 数组中两个函数的对比

// slice 只要给它传入一个 statr/end，那么对于同一个数组来说，它会给我们返回确定的值
// slice 函数本身不会修改原来的数组
// slice 函数是一个纯函数
var names = ["a", "b", "c", "d"]
var newNames1 = names.slice(0, 3)
console.log(newNames1);  // [ 'a', 'b', 'c' ]

// splice 在执行时，有修改原来的数组，修改的 这个操作就是副作用
// splice 不是一个纯函数
var newNames2 = names.splice(2)
console.log(newNames2);   // [ 'c', 'd' ]
console.log(names);  // [ 'a', 'b' ]